

// var userRegister = async(req,res)=>{
 
//     try {
//         const { firstname, lastname, email, password } = req.body;
//         const hash = await bcrypt.hash(password, 10);
//         const user = await User.create({ firstname, lastname, email, password:hash });
//         const token = jwt.sign({ userId: user.id }, 'Node-Exam', {
//           expiresIn: '1h',
//         });
    
//         // Return the user object and the token as a response
//         res.status(201).json({ user, token });
       
//       } catch (error) {
//         res.status(500).json({ error: 'User registration failed' });
//       }


// }



// var userLogin = async(req,res)=>{
//   const { email, password } = req.body;
//   const user = await User.findOne({ where: { email } });
// //   console.log('Email:', email);
// // console.log('User:', user);

//   if (!user) {
//     return res.status(401).json({ error: 'Invalid email or password' });
//   }

//   const isPasswordValid = await bcrypt.compare(password, user.password);

//   if (!isPasswordValid) {
//     return res.status(401).json({ error: 'Invalid email or password' });
//   }

//   const token = jwt.sign({ userId: user.id }, 'Node-Exam', {
//     expiresIn: '1h',
//   });
 
//   res.json({ user, token }); 
// }

//const  createEvent = async(req,res) =>{
//     try {
//       //console.log('req >>>>> ', req);
//       const { title, description, date, inviteeIds } = req.body;
//       const userId = req.user.id; // Get the ID of the authenticated user
     
//       console.log(userId);
//       const event = await Event.create({ title, description, date, creatorId: userId });
//     // Invite users to the event
//       if (inviteeIds && inviteeIds.length > 0) {
//      await event.addInvitees(inviteeIds);
// }
  
//       return res.status(201).json(event);
//     } catch (error) {
//       console.error(error);
//       return res.status(500).json({ error: 'Event creation failed' });
//     }
//}

// const  createEvent = async(req,res) =>{
// try {
//   const { title, description, date, inviteeIds } = req.body;

//   console.log(req.body);
//   const creatorId = req.user.id; // Get the ID of the authenticated user
//   console.log(creatorId);
//   // Create the event
//   const event = await Event.create({ title, description, date, creatorId });
 
//   // Invite users to the event by their IDs
//   if (inviteeIds && inviteeIds.length > 0) {
//     const invitedUsers = await User.findAll({ where: { id: inviteeIds } });
  
//     if (invitedUsers) {
//       await event.addInvitees(invitedUsers);
//     }
//   }

//   return res.status(201).json(event);
// } catch (error) {
//   console.error(error);
//   return res.status(500).json({ error: 'Event creation failed' });
// }
//   }
  

// var getEvent = async (req, res) => {
//   try {
//     const userId = req.user.id; // Get the ID of the authenticated user

//     // Find events where the user is the creator
//     const createdEvents = await Event.findAll({ where: { creatorId: userId } });

//     // Find events where the user is invited
//     const invitedEvents = await Event.findAll({
//       include: [
//         {
//           model: User,
//           as: 'invitees',
//           where: { id: userId }, // Check if the user is among the invitees
//         },
//       ],
//     });

//     return res.status(200).json({ createdEvents, invitedEvents });
//   } catch (error) {
//     console.error(error);
//     return res.status(500).json({ error: 'Event retrieval failed' });
//   }
// }

//git init
//git add .
//git commit -m "add file"
//git remote add bitbucket https://Gautam-Makavana@bitbucket.org/gautammakavana/node-postgres.git
//git push -u -f bitbucket master

// SELECT * 
// FROM public."Events"

// { 
//     "title":"cricket",
//      "description":"cricket",
//      "date":"2022-02-02",
//      "inviteeIds":1
   
// }

// "firstname":"gautam-1234",
// "lastname":"makavna-1234",
// "email":"gm26@gmail.com",
// "password":"123456"

// {
//     "title": "Event Title-3",
//     "description": "Event Description-3",
//     "date": "2023-12-02",
//     "inviteeIds": [1,2,3] // Replace with actual user IDs
//   }